# Flow
# 
# 1 - check if already ran
#
# 1 - attempt to download file from S3 (ignore errors: True)
# 2 - stat file, register variable
# 1 - check if file exists
#

# trigger file used to check whether we have bootstrapped before
- stat:
    path: /root/.etcd_bootstrap
  register: etcd_bootstrap

# only run rest of tasks if we haven't bootstrap before
- block:

  # ensure etcd2 is stopped (as it usually starts automatically on CoreOS)
  - name: etcd2 stop
    systemd:
      name: etcd2
      state: stopped

  - name: clean etcd data-dir
    file:
      state: absent
      path: /var/lib/etcd2/member

  # if we get this far, assume rest will be successfully
  - name: touch /root/.etcd.bootstrap
    file:
      path: /root/.etcd_bootstrap
      state: touch

  - name: Systemd Drop-In Directory
    file:
      path: /etc/systemd/system/etcd2.service.d
      state: directory
      mode: 0755

  - name: S3 download backup (if it exists)
    ignore_errors: True
    s3:
      bucket: smarsh-k8s-dev
      object: /backup.tar.gz
      dest: /tmp/etcd-backup.tar.gz
      mode: get

  - stat:
      path: /tmp/etcd-backup.tar.gz
    register: etcd_backup

  - name: 20-ansibleinit.conf
    template:
      src: 20-ansibleinit.conf.j2
      dest: /etc/systemd/system/etcd2.service.d/20-ansibleinit.conf
      mode: 0644
    when: etcd_backup.stat.exists == False

  - name: copy etcd-recovery.sh
    copy:
      src: etcd-recovery.sh
      dest: /root/etcd-recovery.sh
      mode: 0700
    when: etcd_backup.stat.exists == True

  - name: run etcd-recovery.sh
    shell: ./etcd-recovery.sh {{ ansible_local.k8s_facts.hostname }} {{ ansible_eth0.ipv4.address }}
    args:
      chdir: /root
      executable: /bin/bash
    when: etcd_backup.stat.exists == True

  when: etcd_bootstrap.stat.exists == False

- name: start etcd2
  systemd:
    name: etcd2
    enabled: yes
    state: started
    daemon_reload: yes
